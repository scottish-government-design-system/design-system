@use "../../settings/colours/colours";
@use "../../settings/transition/transition";
@use "../focus/focus";
@use "../high-contrast/high-contrast";
@use "../media-query/media-query";

$blocklink__outline-width: 0;
$link__outline-width: 0.125rem;
$link__border-width: 0.1875rem;




/// Link
///
/// Single definition to enforce consistent display of links and elements that
/// look like links (e.g. buttons we want to have display with a link-like style)

@mixin link {
    @include high-contrast.high-contrast-link-style;
    color: colours.$ds_colour__link;
    text-decoration: underline;
    outline: 0 solid transparent;
    text-underline-offset: 0.0625rem;
    transition: color transition.$transition-out-time, background-color transition.$transition-out-time, outline-color transition.$transition-out-time;

    &:hover {
        background-color: colours.$ds_colour__link--hover__background;
        color: colours.$ds_colour__link--hover;
        outline: $link__outline-width solid colours.$ds_colour__link--hover__background;
        transition-duration: transition.$transition-in-time;
    }

    &:focus {
        @include focus.focus-outline;

        background-color: colours.$ds_colour__link--focus__background;
        box-shadow: #{$link__outline-width * -1} #{$link__outline-width + $link__border-width} colours.$ds_colour__link--focus__shadow, $link__outline-width #{$link__outline-width + $link__border-width} colours.$ds_colour__link--focus__shadow;
        color: colours.$ds_colour__link--focus;
        text-decoration: none;
        transition-duration: 0s;
    }

    > svg {
        fill: currentColor;
    }
}




/// Blocklink
///
/// Mixin to enforce consistency on block-style links, e.g. search results, category items, etc
///
/// @param {string} $link-selector - child element that is used as the link, optional
/// @param {boolean} $hover - whether to apply a hover state

@mixin blocklink ($link-selector: null, $hover: true) {
    display: block;
    position: relative;
    transition: background-color transition.$transition-out-time, outline-color transition.$transition-out-time;
    z-index: 1;

    outline: 0 !important;

    &:focus {
        background-color: colours.$ds_colour__blocklink-bg--focus;
        box-shadow: inset #{$blocklink__outline-width * -1} #{$blocklink__outline-width + $link__border-width * -1} colours.$ds_colour__link--focus__shadow, inset $blocklink__outline-width #{$blocklink__outline-width + $link__border-width * -1} colours.$ds_colour__link--focus__shadow;
        color: colours.$ds_colour__link--focus;

        @include high-contrast.high-contrast-focus;
    }

    @if $hover {
        &:hover:not(:focus) {
            background-color: colours.$ds_colour__blocklink-bg--hover;
        }
    }

    @if $link-selector {
        #{$link-selector} {
            &:focus:hover {
                text-decoration: none;
            }
        }

        /*
            supports grid is a hack as a proxy for supports :focus-within
        */
        @supports (display: grid) {
            #{$link-selector} {
                background-color: transparent;
                outline: none;

                &::after {
                    content: "";
                    height: 100%;
                    left: 0;
                    position: absolute;
                    top: 0;
                    width: 100%;
                    z-index: 0;

                    @include media-query.media-query-high-contrast {
                        content: none;
                    }
                }

                &:focus {
                    &::after {
                        transition-duration: 0s;
                    }
                }
            }

            &:focus-within {
                background-color: colours.$ds_colour__blocklink-bg--focus !important;
                box-shadow: inset 0 -0.1875rem #333333, inset 0 -0.1875rem #333333;
                transition-duration: 0s;

                #{$link-selector} {
                    &:focus {
                        box-shadow: none;
                        background-color: transparent;

                        @include high-contrast.high-contrast-focus;
                    }
                }
            }
        }
    }
}

@mixin blocklink--solid($link-selector: null) {
    @include blocklink($link-selector);

    background-color: colours.$ds_colour__background--primary;
}
