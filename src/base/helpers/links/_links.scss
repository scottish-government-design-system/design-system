$blocklink__outline-width: 0;
$link__outline-width: 2px;
$link__border-width: 0.16em;
$link__underline-offset: 0.16em;
$link__underline-thickness: auto;
$link__underline-offset--hover: $link__underline-offset;
$link__underline-thickness--hover: 0.16em;




/// Link
///
/// Single definition to enforce consistent display of links and elements that
/// look like links (e.g. buttons we want to have display with a link-like style)

@mixin ds_link {
    @include ds_high-contrast-link;

    color: $ds_colour__link;
    outline: 0px solid transparent;
    text-decoration: underline;
    text-underline-offset: $link__underline-offset;
    transition: color $transition-out-time, background-color $transition-out-time, outline-color $transition-out-time;

    &:hover {
        color: $ds_colour__link--hover;
        text-underline-offset: $link__underline-offset--hover;
        text-decoration-thickness: $link__underline-thickness--hover;
        transition-duration: $transition-in-time;
    }

    &:focus {
        @include ds_focus-outline;

        background-color: $ds_colour__link--focus__background;
        box-shadow: #{$link__outline-width * -1} calc($link__outline-width + $link__border-width) $ds_colour__link--focus__shadow, $link__outline-width calc($link__outline-width + $link__border-width) $ds_colour__link--focus__shadow;
        color: $ds_colour__link--focus;
        text-decoration-line: none;
        transition-duration: 0s;
    }

    > svg {
        fill: currentColor;
    }
}




// todo: this is only used in one place (seq nav), remove?
@mixin ds_link-underline($link-selector) {
    @if $link-selector {
        &:not(:focus) #{$link-selector} {
            text-decoration: underline;
            text-underline-offset: $link__underline-offset;
        }

        &:hover #{$link-selector} {
            text-underline-offset: $link__underline-offset--hover;
            text-decoration-thickness: $link__underline-thickness--hover;
        }

        @include ds_media-query-high-contrast {
            #{$link-selector} {
                text-decoration: underline;
            }
        }
    }
    @else {
        text-decoration: underline;
        text-underline-offset: $link__underline-offset;

        &:hover {
            text-underline-offset: $link__underline-offset--hover;
            text-decoration-thickness: $link__underline-thickness--hover;
        }
    }
}




/// Blocklink
///
/// Mixin to enforce consistency on block-style links, e.g. search results, category items, etc
///
/// @param {string} $link-selector - child element that is used as the link, optional
/// @param {boolean} $hover - whether to apply a hover state

@mixin ds_blocklink ($link-selector: null, $hover: true) {
    display: block;
    outline: 0;
    position: relative;
    transition: background-color $transition-out-time, outline-color $transition-out-time;
    z-index: 1;

    @include ds_high-contrast-link;

    &:focus {
        background-color: $ds_colour__blocklink-bg--focus;
        box-shadow: inset #{$blocklink__outline-width * -1} #{$blocklink__outline-width + $link__border-width * -1} $ds_colour__link--focus__shadow, inset $blocklink__outline-width #{$blocklink__outline-width + $link__border-width * -1} $ds_colour__link--focus__shadow;
        color: $ds_colour__link--focus;
        transition-duration: 0s;

        outline: 0;
    }

    @if $hover {
        &:hover:not(:focus) {
            background-color: $ds_colour__blocklink-bg--hover;
        }
    }

    @if $link-selector {
        #{$link-selector} {
            &:focus:hover {
                text-decoration-line: none;
            }
        }

        /*
            supports grid is a hack as a proxy for supports :focus-within
        */
        @supports (display: grid) {
            #{$link-selector} {
                background-color: transparent;
                outline: none;

                &::after {
                    content: "";
                    height: 100%;
                    left: 0px;
                    position: absolute;
                    top: 0px;
                    width: 100%;
                    z-index: 0;

                    @include ds_media-query-high-contrast {
                        content: none;
                    }
                }

                &:focus {
                    &::after {
                        transition-duration: 0s;
                    }
                }
            }

            &:focus-within {
                background-color: $ds_colour__blocklink-bg--focus !important;
                box-shadow: inset 0 #{$link__border-width * -1} $ds_colour__link--focus__shadow, inset 0 #{$link__border-width * -1} $ds_colour__link--focus__shadow;
                transition-duration: 0s;

                #{$link-selector} {
                    &:focus {
                        box-shadow: none;
                        background-color: transparent;
                    }
                }
            }
        }
    }
}

@mixin ds_blocklink--solid($link-selector: null) {
    @include ds_blocklink($link-selector);

    background-color: $ds_colour__background--primary;
}




/// legacy non-prefixed names
@mixin link {
    @include ds_link;
}

@mixin blocklink($link-selector: null, $hover: true) {
    @include ds_blocklink($link-selector, hover);
}

@mixin blocklink--solid($link-selector: null) {
    @include ds_blocklink--solid($link-selector);
}
