$blocklink__outline-width: 0;
$link__current-underline-thickness: 0.16em;
$link__outline-width: 0.125em;
$link__underline-offset: 0.16em;
$link__underline-thickness: auto;
$link__underline-offset--hover: $link__underline-offset;
$link__underline-thickness--hover: 0.16em;




/// Link
///
/// Single definition to enforce consistent display of links and elements that
/// look like links (e.g. buttons we want to have display with a link-like style)

@mixin ds_link {
    @include ds_high-contrast-link;

    color: $ds_colour__link;
    outline: 0px solid transparent;
    text-decoration: underline;
    text-underline-offset: $link__underline-offset;
    transition: color $transition-out-time, background-color $transition-out-time, outline-color $transition-out-time;

    &:hover {
        color: $ds_colour__link--hover;
        text-underline-offset: $link__underline-offset--hover;
        @include ds_unsupported-css-fallback(
            $prop: 'text-decoration-thickness',
            $modern: round($link__underline-thickness--hover, 1px),
            $fallback: $link__underline-thickness--hover
        );
        transition-duration: $transition-in-time;
    }

    &:focus {
        @include ds_focus;
    }

    > svg {
        fill: currentColor;
    }
}

@mixin ds_link--block($link-selector: null, $underline: false) {
    display: block;
    position: relative;
    @if $underline == false {
        text-decoration-line: none;
    }

    @if $link-selector {
        #{$link-selector} {
            &:focus {
                filter: none;
                @include ds_media-query-high-contrast {
                    outline-width: 0 !important;
                }
            }

            &:focus:hover {
                text-decoration-line: none;
            }
        }

        &:focus-within {
            @include ds_focus;
            @include ds_focus--inset;
        }

        &:hover:not(:focus-within) {
            background-color: $ds_colour__link--hover__background;
            color: $ds_colour__link--hover;
        }
    } @else {
        &:focus {
            @include ds_focus--inset;
        }

        &:hover:not(:focus) {
            background-color: $ds_colour__link--hover__background;
            color: $ds_colour__link--hover;
        }
    }
}

@mixin ds_link-underline($link-selector) {
    @if $link-selector {
        &:not(:focus) #{$link-selector} {
            text-decoration: underline;
            text-underline-offset: $link__underline-offset;
        }

        &:hover #{$link-selector} {
            text-underline-offset: $link__underline-offset--hover;
            @include ds_unsupported-css-fallback(
                $prop: 'text-decoration-thickness',
                $modern: round($link__underline-thickness--hover, 1px),
                $fallback: $link__underline-thickness--hover
            );
        }
    }
    @else {
        text-decoration: underline;
        text-underline-offset: $link__underline-offset;

        &:hover {
            text-underline-offset: $link__underline-offset--hover;
            @include ds_unsupported-css-fallback(
                $prop: 'text-decoration-thickness',
                $modern: round($link__underline-thickness--hover, 1px),
                $fallback: $link__underline-thickness--hover
            );
        }
    }
}




/// Blocklink
///
/// Mixin to enforce consistency on block-style links, e.g. search results, category items, etc
///
/// @param {string} $link-selector - child element that is used as the link, optional
@mixin ds_blocklink($link-selector: null) {
    @include ds_link;
    @include ds_link--block($link-selector);
}
