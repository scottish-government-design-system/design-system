@use "../../base/helpers/button-sizing/button-sizing";
@use "../../base/helpers/headings/headings";
@use "../../base/helpers/high-contrast/high-contrast";
@use "../../base/helpers/links/links";
@use "../../base/helpers/spacing/spacing";
@use "../../base/settings/colours/colours";
@use "../../base/settings/transition/transition";
@use "../../base/settings/type/type";

/*------------------------------------*\
    BUTTONS
\*------------------------------------*/

$button__border-width: 0.125rem !default;
$button__outline-width: 0.1875rem !default;
$button__padding--x: 1rem !default;
$link__border-width: 0.1875rem;



///
/// [1] renders an outline/border in windows high contrast mode
///
.ds_button {
    @include headings.small-size;
    @include button-sizing.button-sizing;

    background: colours.$ds_colour__button__background;
    border: 0;
    border-radius: 0;
    color: colours.$ds_colour__button;
    cursor: pointer;
    display: inline-block;
    font-weight: type.$bold;
    line-height: 1.5rem;
    outline: $button__border-width solid transparent; /// [1]
    outline-offset: ($button__border-width * -1); /// [1]
    position: relative;
    text-align: center;
    text-decoration: none;
    transition: background-color transition.$transition-out-time;

    @include spacing.responsive-margin(4, bottom);

    // Margins wont collapse as inline-block.
    // Assume block margins (step 4) on preceding element/component so no top margin is needed on ds_button
    margin-top: 0;


    &:hover {
        background-color: colours.$ds_colour__button--hover__background;
        color: colours.$ds_colour__button;
        outline-color: transparent;
        transition-duration: transition.$transition-in-time;
    }

    &:focus {
        background-color: colours.$ds_colour__button--focus__background;
        box-shadow: 0 $link__border-width colours.$ds_colour__link--focus__shadow;
        color: colours.$ds_colour__button--focus;
        outline: 0;
        transition-duration: 0s;

        @include high-contrast.high-contrast-focus(0.25rem);
    }

    // ICONS ON BUTTONS
    .ds_icon {
        pointer-events: none;
    }

    &[disabled] {
        background-color: colours.$ds_colour__button--disabled__background;
        box-shadow: none;
        color: colours.$ds_colour__button;
        font-weight: type.$normal;
        outline: none;
        pointer-events: none;
    }
}

.ds_reversed .ds_button {
    background-color: colours.$ds_colour__button;
    color: colours.$ds_colour__button__background;

    &:focus,
    &:hover:focus {
        background-color: colours.$ds_colour__blocklink-bg--focus;
    }

    &:hover {
        background-color: colours.$ds_colour__blocklink-bg--hover;
    }

    &--secondary {
        background-color: transparent;
        border-color: currentColor;
        color: colours.$ds_colour__button;

        &:hover:not(:focus) {
            background-color: rgba(0, 0, 0, 0.3);
            color: colours.$ds_colour__button;
            outline-color: currentColor;
        }
    }
}

.ds_button {
    &--secondary {
        background-color: colours.$ds_colour__button--secondary__background;
        color: colours.$ds_colour__button--secondary;
        outline: $button__border-width solid currentColor;
        outline-offset: ($button__border-width * -1);

        &:hover:not(:focus) {
            background-color: colours.$ds_colour__button--secondary--hover__background;
            color: colours.$ds_colour__button--secondary--hover;
            outline: $button__border-width solid currentColor;
            outline-offset: ($button__border-width * -1);
        }
    }

    &--cancel {
        background-color: colours.$ds_colour__button--cancel__background;
        color: colours.$ds_colour__button--cancel;
        outline: $button__border-width solid currentColor;
        outline-offset: ($button__border-width * -1);

        &:hover:not(:focus) {
            background-color: colours.$ds_colour__button--cancel--hover__background;
            color: colours.$ds_colour__button--cancel;
            outline: $button__border-width solid currentColor;
            outline-offset: ($button__border-width * -1);
        }
    }
}


// SIZE VARIANTS
.ds_button {
    &--small {
        @include headings.small-size;
        @include button-sizing.button-sizing--small;
    }
}

// WIDTH VARIANTS
.ds_button {
    &--fixed {
        width: 12.5rem;

        &.ds_button--small {
            width: 10rem;
        }
    }

    &--max {
        max-width: 30rem;
        width: 100%;
    }
}

// BUTTONS WITH ICONS
// n.b. icon sizing is included in the ds_button-sizing mixins
.ds_button {
    .ds_icon {
        bottom: 0;
        box-sizing: content-box;
        pointer-events: none;
        position: absolute;
        right: 0;
        top: 0;
    }

    &--has-icon {
        padding-right: calc(button-sizing.$button__height + $button__padding--x);
    }

    &--has-icon--left {
        padding-left: calc(button-sizing.$button__height + $button__padding--x);
        padding-right: #{$button__padding--x};

        .ds_icon {
            left: 0;
            right: auto;
        }
    }
}
